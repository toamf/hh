#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <math.h>

int isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/' || c == '^' || c == '!';
}

int priority(char op) {
    if (op == '^' || op == '!') return 3;
    if (op == '*' || op == '/') return 2;
    if (op == '+' || op == '-') return 1;
    return 0;
}

double applyOp(double a, double b, char op) {
    if (op == '+') return a + b;
    if (op == '-') return a - b;
    if (op == '*') return a * b;
    if (op == '/') return a / b;
    if (op == '^') return pow(a, b);
    if (op == '!') {
        double result = 1;
        for (int i = 2; i <= a; i++) {
            result *= i;
        }
        return result;
    }
    return 0;
}

double evaluate(char* expr) {
    int i, j;
    int len = strlen(expr);

    double values[len];
    int val_idx = -1;

    char ops[len];
    int op_idx = -1;

    for (i = 0; i < len; i++) {
        if (isspace(expr[i])) {
            continue;
        }
        if (isdigit(expr[i]) || expr[i] == '-') {
            double num = atof(&expr[i]);
            values[++val_idx] = num;

            while (i < len && (isdigit(expr[i]) || expr[i] == '.')) {
                i++;
            }
            i--;
        }
        else if (isOperator(expr[i])) {
            while (op_idx >= 0 && priority(ops[op_idx]) >= priority(expr[i])) {
                double val2 = values[val_idx--];
                double val1 = values[val_idx--];
                char op = ops[op_idx--];

                values[++val_idx] = applyOp(val1, val2, op);
            }
            ops[++op_idx] = expr[i];
        }
    }

    while (op_idx >= 0) {
        double val2 = values[val_idx--];
        double val1 = values[val_idx--];
        char op = ops[op_idx--];

        values[++val_idx] = applyOp(val1, val2, op);
    }

    return values[0];
}

int main() {
    char expr[2500];
    printf("Enter a mathematical expression: ");
    fgets(expr, sizeof(expr), stdin);

    expr[strcspn(expr, "\n")] = '\0'; // remove the newline character

    double result = evaluate(expr);
    printf("Result: %.2lf\n", result);
    
    int from, to, sum = 0;
    
    printf("Enter the starting number: ");
    scanf("%d", &from);
    
    printf("Enter the ending number: ");
    scanf("%d", &to);
    
    for (int i = from; i <= to; i++) {
        sum += i;
    }
    
    printf("The sum of numbers from %d to %d is: %d\n", from, to, sum);

    return 0;
}
