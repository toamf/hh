import pandas as pd
import numpy as np
from statsmodels.tsa.arima.model import ARIMA

train_df = pd.read_csv('/kaggle/input/train1/train.csv')
test_df = pd.read_csv('/kaggle/input/test11/test.csv')

def fit_arima(series, order):
    model = ARIMA(series, order=order)
    model_fit = model.fit()
    forecast = model_fit.forecast(steps=28)
    return forecast

train_series = train_df.groupby('id')['val'].apply(list).to_dict()

all_ids = np.concatenate((train_df['id'].unique(), test_df['id'].unique()))
all_ids = np.unique(all_ids)

test_df['forecast'] = np.nan

for id in all_ids:
    if id in train_series:
        series = np.array(train_series[id])
        order = (1, 1, 1)
        forecast = fit_arima(series, order)
        print(f"ID {id} forecast: {forecast}")
        test_df.loc[test_df['id'] == id, 'forecast'] = forecast
    else:
        print(f"ID {id} not found in the training dataset")

test_df.to_csv('/kaggle/working/new.csv', index=False)



Этот скрипт на Python выполняет прогнозирование временных рядов с использованием модели ARIMA.
Скрипт импортирует необходимые библиотеки: pandas, numpy и statsmodels.
Скрипт считывает два CSV-файла, один для обучающих данных, а другой для тестовых данных, в фреймы данных pandas.
Скрипт определяет функцию с именем fit_arima, которая принимает в качестве входных данных временной ряд и кортеж порядка. Затем функция подгоняет модель ARIMA к временным рядам в заданном порядке, используя функцию ARIMA из библиотеки statsmodels. Затем он использует метод прогнозирования подобранной модели для генерации 28-шагового прогноза для временного ряда. Наконец, функция возвращает прогноз.
Скрипт преобразует обучающие данные в словарь временных рядов, сгруппированных по идентификатору, используя методы groupby и to_dict pandas. Результирующий словарь содержит идентификаторы в качестве ключей и списки соответствующих значений временных рядов в качестве значений.
Скрипт объединяет уникальные идентификаторы в наборах данных обучения и тестирования в единый массив, удаляет дубликаты и сохраняет их в переменной all_ids.
Скрипт перебирает все идентификаторы в массиве all_ids. Для каждого идентификатора он проверяет, присутствует ли идентификатор в словаре обучающих данных. Если идентификатор присутствует, сценарий извлекает соответствующие значения временного ряда из словаря обучающих данных, устанавливает порядок ARIMA равным (1, 1, 1) и вызывает функцию fit_arima для генерации 28-шагового прогноза для временного ряда. Затем прогноз добавляется в dataframe данных тестирования с помощью метода loc pandas для поиска строк с соответствующим идентификатором и столбца прогноза. Если идентификатор не найден в словаре обучающих данных, скрипт выводит сообщение, указывающее, что идентификатор не был найден.
После перебора всех идентификаторов скрипт записывает измененный фрейм данных тестирования с добавленными прогнозами в новый CSV-файл.
